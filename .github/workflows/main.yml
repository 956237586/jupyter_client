name: CI

on:
  push:
  pull_request:

jobs:
  check_duplicate_runs:
    name: Check for duplicate runs
    continue-on-error: true
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          concurrent_skipping: always
          cancel_others: true
          skip_after_successful_duplicate: true
          paths_ignore: '["**/README.md", "**/CHANGELOG.md", "**/COPYING.md"]'
          do_not_skip: '["pull_request"]'

  # Run "pre-commit run --all-files"
  pre-commit:
    name: Run pre-commit hook

    needs: check_duplicate_runs
    if: ${{ needs.check_duplicate_runs.outputs.should_skip != 'true' }}

    runs-on: ubuntu-latest
    timeout-minutes: 2

    env:
      PYTHON_VERSION: 3.8

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Run pre-commit
        uses: pre-commit/action@v2.0.0

      - name: Help message if pre-commit fail
        if: ${{ failure() }}
        run: |
          echo "You can install pre-commit hooks to automatically run formatting"
          echo "on each commit with:"
          echo "    pre-commit install"
          echo "or you can run by hand on staged files with"
          echo "    pre-commit run"
          echo "or after-the-fact on already committed files with"
          echo "    pre-commit run --all-files"

  build-n-test-n-coverage:
    name: Build, test and code coverage

    needs: check_duplicate_runs
    if: ${{ needs.check_duplicate_runs.outputs.should_skip != 'true' }}

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.6, 3.7, 3.8, 3.9, "3.10", "pypy-3.7"]

    env:
      OS: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Base Setup
        uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1

      - name: Install dependencies
        run: |
          pip install --upgrade --upgrade-strategy eager --pre -e .[test]
          pip freeze

      - name: Check types
        run: mypy jupyter_client --exclude '\/tests|kernelspecapp|ioloop|runapp' --install-types --non-interactive

      - name: Run the tests with coverage
        if: ${{ !startsWith(matrix.python-version, 'pypy') }}
        run: pytest --cov jupyter_client -v jupyter_client

      - name: Run the tests on pypy
        if: startsWith(matrix.python-version, 'pypy')
        run: pytest -v jupyter_client

      - name: Build the docs
        run: |
          pip install -r requirements-doc.txt
          cd docs
          make html

      - name: Code coverage
        run: codecov
